<#+
    // <copyright company="toamto@石阳">
    //  Copyright © toamto@石阳. All Rights Reserved.
    // </copyright>

    public partial class SeaSkyControllerSy : CSharpTemplate
    {
        private DbTable _model;
        private MyConfig _myConfig;

        public SeaSkyControllerSy(DbTable model,MyConfig myConfig)
        {
            List<DbColumn> tempCol=new List<DbColumn>();
            foreach(DbColumn column in model.DbColumns){
                string colName=column.ColumnName.ToLower();
                if(!colName.Contains("isdelete")&&!colName.Contains("gmtcreateuser")&&!colName.Contains("gmtcreatedate")&&!colName.Contains("gmtupdateuser")&&!colName.Contains("gmtupdatedate")&&!colName.Contains("timestamp"))
                {
                    tempCol.Add(column);
                }
            }
            model.DbColumns=tempCol;
            _model = model;
            _myConfig=myConfig;
            _model.TableName=StringHandler.GetCamel(_model.TableName.Replace(_myConfig.TableName,""));
        }
        private string GetIsNull(DbColumn column)
        {
            if(column.CommonType.IsValueType && column.IsNullable){
                return "?";
            }else{
                return "";
            }
        }


        public override string TransformText()
        {
#>
using Microsoft.Practices.Unity;
using SeaSky.StandardLib.MyModel;
using System.Collections.Generic;
using System.Web.Http;
using <#=            _myConfig.NameSpace#>.BLL;
using <#=            _myConfig.NameSpace#>.Model;
using System;
using <#=            _myConfig.NameSpace#>.WebApi.Log;
using System.Net.Http;
using SeaSky.StandardLib.MyExtensions;
namespace <#=            _myConfig.NameSpace #>.WebApi.Controllers
{

    public partial class <#=            _model.TableName#>Controller : ApiController
    {

        private I<#=            _model.TableName#>Service <#=            _model.TableName#>Service = ApplicationContext.Current.UnityContainer.Resolve<I<#=            _model.TableName#>Service>();


        #region 基础方法
		
        /// <summary>
        /// 获取<#=            _model.TableDesc #>视图列表分页
        /// </summary>
        /// <param name="model">ViewModel</param>
        /// <returns>ViewModel</returns>
        public BaseResultModel<PageModel<<#=            _model.TableName#>ViewModel>> ListViewPage<#=            _model.TableName#>(<#=            _model.TableName#>ViewModel model)
        {
            return <#=            _model.TableName#>Service.ListViewPage<#=            _model.TableName#>(model);
        }
		
        /// <summary>
        /// 获取<#=            _model.TableDesc #>列表分页
        /// </summary>
        /// <param name="model">InputModel</param>
        /// <returns>OutputModel</returns>
        public BaseResultModel<PageModel<<#=            _model.TableName#>OutputModel>> ListPage<#=            _model.TableName#>(<#=            _model.TableName#>InputModel model)
        {
            return <#=            _model.TableName#>Service.ListPage<#=            _model.TableName#>(model);
        }

        /// <summary>
        /// 新增、修改<#=            _model.TableDesc #>
        /// </summary>
        /// <param name="model">OutputModel</param>
        /// <returns>OutputModel</returns>
        public BaseResultModel<<#=            _model.TableName#>OutputModel> Modify<#=            _model.TableName#>(<#=            _model.TableName#>InputModel model)
        {
            if (model == null)
            {
                return new ErrorResultModel<<#=            _model.TableName#>OutputModel>(EnumErrorCode.请求参数错误, "参数不能为空");
            }
            ModelAttrEx arrtEx = new ModelAttrEx();
            string modelErrorMes = "";
            if (model.<#=            _model.TableName#>ID.IsNullOrEmpty())
            {
                modelErrorMes += arrtEx.AddAttrVaild<<#=            _model.TableName#>InputModel>(ModelState, model);
            }
            else
            {
                modelErrorMes += arrtEx.EditAttrVaild<<#=            _model.TableName#>InputModel>(ModelState, model);
            }
            if (!modelErrorMes.IsNullOrEmpty())
            {
                return new ErrorResultModel<<#=            _model.TableName#>OutputModel>(EnumErrorCode.请求参数错误, modelErrorMes);
            }
            return <#=            _model.TableName#>Service.Modify<#=            _model.TableName#>(model);
        }

        /// <summary>
        /// 删除<#=            _model.TableDesc #> (逻辑删除)
        /// </summary>
        /// <param name="IDs">List-->Guid?</param>
        /// <returns>受影响行数</returns>
        [HttpPost]
        public BaseResultModel<int> Delete<#=            _model.TableName#>(List<Guid?> IDs)
        {
            if (IDs==null||IDs.Count == 0)
            {
                return new ErrorResultModel<int>(EnumErrorCode.请求参数错误, "参数不能为空");
            }
            return <#=            _model.TableName#>Service.Delete<#=            _model.TableName#>(IDs);
        }

        /// <summary>
        /// 获取单个<#=            _model.TableDesc #>
        /// </summary>
        /// <param name="ID">Guid?</param>
        /// <returns>ViewModel</returns>
        [HttpPost]
        public BaseResultModel<<#=            _model.TableName#>ViewModel> Get<#=            _model.TableName#>(Guid? ID)
        {
            if (ID.IsNullOrEmpty())
            {
                return new ErrorResultModel<<#=            _model.TableName#>ViewModel>(EnumErrorCode.请求参数错误, "参数不能为空");
            }
            return <#=            _model.TableName#>Service.Get<#=            _model.TableName#>(ID);
        }
        #endregion
    }


}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>