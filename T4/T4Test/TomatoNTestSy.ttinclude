<#+
    // <copyright company="toamto@石阳">
    //  Copyright © toamto@石阳. All Rights Reserved.
    // </copyright>

    public class TomatoNTestSy : CSharpTemplate
    {
        private DbTable _model;
        private MyConfig _myConfig;

        public TomatoNTestSy(DbTable model,MyConfig myConfig)
        {
            List<DbColumn> tempCol=new List<DbColumn>();
            foreach(DbColumn column in model.DbColumns){
                string colName=column.ColumnName.ToLower();
                if(!colName.Contains("isdelete")&&!colName.Contains("gmtcreateuser")&&!colName.Contains("gmtcreatedate")&&!colName.Contains("gmtupdateuser")&&!colName.Contains("gmtupdatedate")&&!colName.Contains("timestamp"))
                {
                    tempCol.Add(column);
                }
            }
            model.DbColumns=tempCol;
            _model = model;
            _myConfig=myConfig;
            _model.TableName=StringHandler.GetCamel(_model.TableName.Replace(_myConfig.TableName,""));
        }
        private string GetIsNull(DbColumn column)
        {
            if(column.CommonType.IsValueType && column.IsNullable){
                return "?";
            }else{
                return "";
            }
        }


        public override string TransformText()
        {
#>
namespace UnitTest_<#=            _myConfig.NameSpace #>
{
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Practices.Unity;
using Tomato.StandardLib.MyModel;
using System.Collections.Generic;
using System.Transactions;
using <#=            _myConfig.NameSpace#>.Model;
using <#=            _myConfig.NameSpace#>.BLL;

    [TestClass]
    public class <#=            _model.TableName#>_Test 
    {

        private I<#=            _model.TableName#>Service <#=            _model.TableName#>Service = ApplicationContext.Current.UnityContainer.Resolve<I<#=            _model.TableName#>Service>();

        private TransactionScope scope;

        #region 附加测试特性

        [TestInitialize()]
        public void MyTestInitialize()
        {
            TransactionOptions transaction = new TransactionOptions();
            transaction.IsolationLevel = IsolationLevel.ReadCommitted;
            scope = new TransactionScope(TransactionScopeOption.Required, transaction);
        }

        // 在每个测试运行完之后，使用 TestCleanup 来运行代码
        [TestCleanup()]
        public void MyTestCleanup()
        {
            scope.Dispose();
        }
        #endregion


        #region 基础方法
        /// <summary>
        /// 获取<#=            _model.TableDesc #>视图列表分页
        /// </summary>
        [TestMethod]
        public void ListViewPage<#=            _model.TableName#>_Test()
        {
            <#=            _model.TableName#>ViewModel testModel = null;
            BaseResultModel<PageModel<<#=            _model.TableName#>ViewModel>> result = <#=            _model.TableName#>Service.ListViewPage<#=            _model.TableName#>(testModel);
            Assert.IsTrue(result.IsSuccess && result.Data.DataCount > 0, result.ErrorMessage);

            testModel = new <#=            _model.TableName#>ViewModel()
            {
                PageNO = 1,
                PageSize = 2,
<#+            foreach(DbColumn column in _model.DbColumns){
                if(!column.IsNullable){
                    if(column.CSharpType.ToLower().Contains("string"))
                    {#>
                <#=                        column.ColumnNameAlias#>="测试<#=                        column.ColumnNameAlias#>"
				     <#+                    break;}}} #>
            };
            result = <#=            _model.TableName#>Service.ListViewPage<#=            _model.TableName#>(testModel);
            Assert.IsTrue(result.IsSuccess, result.ErrorMessage);
        }
		
        /// <summary>
        /// 获取<#=            _model.TableDesc #>列表分页
        /// </summary>
        [TestMethod]
        public void ListPage<#=            _model.TableName#>_Test()
        {
            <#=            _model.TableName#>InputModel testModel = null;
            BaseResultModel<PageModel<<#=            _model.TableName#>OutputModel>> result = <#=            _model.TableName#>Service.ListPage<#=            _model.TableName#>(testModel);
            Assert.IsTrue(result.IsSuccess && result.Data.DataCount > 0, result.ErrorMessage);

            testModel = new <#=            _model.TableName#>InputModel()
            {
                PageNO = 1,
                PageSize = 2,
<#+            foreach(DbColumn column in _model.DbColumns){
                if(!column.IsNullable){
                    if(column.CSharpType.ToLower().Contains("string"))
                    {#>
                <#=                        column.ColumnNameAlias#>="测试<#=                        column.ColumnNameAlias#>"
				     <#+                    break;}}} #>
            };
            result = <#=            _model.TableName#>Service.ListPage<#=            _model.TableName#>(testModel);
            Assert.IsTrue(result.IsSuccess, result.ErrorMessage);
        }

        /// <summary>
        /// 新增、修改<#=            _model.TableDesc #>
        /// </summary>
        [TestMethod]
        public void Modify<#=            _model.TableName#>_Test()
        {
            <#=            _model.TableName#>InputModel testModel = new <#=            _model.TableName#>InputModel()
            {
<#+            foreach(DbColumn column in _model.DbColumns){
                if(!column.IsNullable){
                    if(column.IsPrimaryKey){
                        continue;
                    }
                    if(column.CSharpType.ToLower().Contains("guid"))
                    {#>
                <#=                        column.ColumnNameAlias#>=Guid.NewGuid(),
                <#+                    }      else if(column.CSharpType.ToLower().Contains("bool")) {    #>
                <#=                        column.ColumnNameAlias#> = <#=                        new Random(Guid.NewGuid().GetHashCode()).Next(1)==0?"true":"false"#>,
                <#+                    }      else if(column.CSharpType.ToLower().Contains("int")||column.CSharpType.ToLower().Contains("decimal")) {    #>
                <#=                        column.ColumnNameAlias#> = <#=                        new Random(Guid.NewGuid().GetHashCode()).Next(100)#>,
                <#+                    }      else if(column.CSharpType.ToLower().Contains("date")) {    #>
                <#=                        column.ColumnNameAlias#> = DateTime.Now,
                <#+                    }else{#><#=                        column.ColumnNameAlias#> = "测试<#=                        column.ColumnNameAlias#>",
            <#+                    } }} #>};
            BaseResultModel<<#=            _model.TableName#>OutputModel> result = <#=            _model.TableName#>Service.Modify<#=            _model.TableName#>(testModel);
            Assert.IsTrue(result.IsSuccess, result.ErrorMessage);

            testModel = new <#=            _model.TableName#>InputModel()
            {
                <#=            _model.TableName#>ID= result.Data.<#=            _model.TableName#>ID,
<#+            foreach(DbColumn column in _model.DbColumns){
                if(!column.IsNullable){
                    if(column.IsPrimaryKey){
                        continue;
                    }
                    if(column.CSharpType.ToLower().Contains("guid"))
                    {#>
                <#=                        column.ColumnNameAlias#> =Guid.NewGuid(),
                <#+                    }      else if(column.CSharpType.ToLower().Contains("bool")) {    #>
                <#=                        column.ColumnNameAlias#> = <#=                        new Random(Guid.NewGuid().GetHashCode()).Next(1)==0?"true":"false"#>,
                <#+                    }      else if(column.CSharpType.ToLower().Contains("int")||column.CSharpType.ToLower().Contains("decimal")) {    #>
                <#=                        column.ColumnNameAlias#> = <#=                        new Random(Guid.NewGuid().GetHashCode()).Next(100)#>,
                <#+                    }      else if(column.CSharpType.ToLower().Contains("date")) {    #>
                <#=                        column.ColumnNameAlias#> = DateTime.Now,
                <#+                    }else{#><#=                        column.ColumnNameAlias#> = "测试<#=                        column.ColumnNameAlias#>",
            <#+                    } }   break;} #>
            };
            result = <#=            _model.TableName#>Service.Modify<#=            _model.TableName#>(testModel);
            Assert.IsTrue(result.IsSuccess, result.ErrorMessage);
			
            BaseResultModel<int> delResult = <#=            _model.TableName#>Service.Delete<#=            _model.TableName#>(new List<Guid?>() { testModel.<#=            _model.TableName#>ID });
            Assert.IsTrue(delResult.IsSuccess, delResult.ErrorMessage);
        }

        /// <summary>
        /// 获取单个<#=            _model.TableDesc #> 
        /// </summary>
        [TestMethod]
        public void Get<#=            _model.TableName#>_Test()
        {
            <#=            _model.TableName#>InputModel testModel = new <#=            _model.TableName#>InputModel()
            {
<#+            foreach(DbColumn column in _model.DbColumns){
                if(!column.IsNullable){
                    if(column.IsPrimaryKey){
                        continue;
                    }
                    if(column.CSharpType.ToLower().Contains("guid"))
                    {#>
                <#=                        column.ColumnNameAlias#>=Guid.NewGuid(),
                <#+                    }      else if(column.CSharpType.ToLower().Contains("bool")) {    #>
                <#=                        column.ColumnNameAlias#> = <#=                        new Random(Guid.NewGuid().GetHashCode()).Next(1)==0?"true":"false"#>,
                <#+                    }      else if(column.CSharpType.ToLower().Contains("int")||column.CSharpType.ToLower().Contains("decimal")) {    #>
                <#=                        column.ColumnNameAlias#> = <#=                        new Random(Guid.NewGuid().GetHashCode()).Next(100)#>,
                <#+                    }      else if(column.CSharpType.ToLower().Contains("date")) {    #>
                <#=                        column.ColumnNameAlias#> = DateTime.Now,
                <#+                    }else{#><#=                        column.ColumnNameAlias#> = "测试<#=                        column.ColumnNameAlias#>",
            <#+                    } }} #>
            };
            BaseResultModel<<#=            _model.TableName#>OutputModel> insModelResult = <#=            _model.TableName#>Service.Modify<#=            _model.TableName#>(testModel);
            Assert.IsTrue(insModelResult.IsSuccess, insModelResult.ErrorMessage);

            BaseResultModel<<#=            _model.TableName#>ViewModel> result = <#=            _model.TableName#>Service.Get<#=            _model.TableName#>(insModelResult.Data.<#=            _model.TableName#>ID);
            Assert.IsTrue(result.IsSuccess, result.ErrorMessage);
			
            BaseResultModel<int> delResult = <#=            _model.TableName#>Service.Delete<#=            _model.TableName#>(new List<Guid?>() { insModelResult.Data.<#=            _model.TableName#>ID });
            Assert.IsTrue(delResult.IsSuccess, delResult.ErrorMessage);
        }
        #endregion
    }


}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>


